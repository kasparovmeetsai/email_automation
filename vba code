Sub CreateAndEmailSheet()
    Dim wb As Workbook
    Dim newWb As Workbook
    Dim ws As Worksheet
    Dim newWs As Worksheet
    Dim rng As Range
    
    ' Set the existing workbook and worksheet (10th sheet)
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(10)
    
    ' Define the range to copy (A1:B3 based on the image)
    Set rng = ws.Range("A1:B3")
    
    ' Create a new workbook and copy the range into it
    Set newWb = Workbooks.Add
    Set newWs = newWb.Sheets(1)
    rng.Copy
    newWs.Range("A1").PasteSpecial Paste:=xlPasteValues
    
    ' Save the new workbook temporarily
    Dim tempFilePath As String
    tempFilePath = Environ("TEMP") & "\tempWorkbook.xlsx"
    newWb.SaveAs tempFilePath
    
    ' Send the new workbook as an email attachment
    Dim OutlookApp As Object
    Dim OutlookMail As Object
    
    Set OutlookApp = CreateObject("Outlook.Application")
    Set OutlookMail = OutlookApp.CreateItem(0)
    
    With OutlookMail
        .To = "recipient@example.com"
        .Subject = "New Workbook"
        .Body = "Please find the attached workbook."
        .Attachments.Add tempFilePath
        .Send
    End With
    
    ' Close the new workbook without saving
    newWb.Close SaveChanges:=False
    
    ' Delete the temporary file
    Kill tempFilePath
    
    ' Clean up
    Set newWs = Nothing
    Set newWb = Nothing
    Set ws = Nothing
    Set wb = Nothing
    Set OutlookMail = Nothing
    Set OutlookApp = Nothing
    
    MsgBox "Email sent successfully."
End Sub




#NEXT CODE#

Sub UpdateValues()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1")

    ' Define existing ranges
    Dim existingRanges As Variant
    existingRanges = Array(ws.Range("B1:D7"), ws.Range("B13:D17"))
    
    ' Define new ranges
    Dim newRanges As Variant
    newRanges = Array(ws.Range("B8:D12"), ws.Range("B18:D25"))

    Dim rngExisting As Range
    Dim rngNew As Range
    Dim cell As Range
    Dim cellNew As Range
    Dim matchFound As Boolean

    ' Loop through each pair of existing and new ranges
    For i = LBound(existingRanges) To UBound(existingRanges)
        Set rngExisting = existingRanges(i)
        Set rngNew = newRanges(i)

        For Each cellNew In rngNew.Rows
            matchFound = False

            For Each cell In rngExisting.Rows
                If cell.Cells(1, 1).Value = cellNew.Cells(1, 1).Value And _
                   cell.Cells(1, 2).Value = cellNew.Cells(1, 2).Value Then
                    cell.Cells(1, 3).Value = cell.Cells(1, 3).Value + cellNew.Cells(1, 3).Value
                    matchFound = True
                    Exit For
                End If
            Next cell

            If Not matchFound Then
                ' Find the first completely empty row in the existing range
                For Each cell In rngExisting.Rows
                    If IsEmpty(cell.Cells(1, 1).Value) And IsEmpty(cell.Cells(1, 2).Value) And IsEmpty(cell.Cells(1, 3).Value) Then
                        cell.Cells(1, 1).Value = cellNew.Cells(1, 1).Value
                        cell.Cells(1, 2).Value = cellNew.Cells(1, 2).Value
                        cell.Cells(1, 3).Value = cellNew.Cells(1, 3).Value
                        Exit For
                    End If
                Next cell
            End If
        Next cellNew
    Next i
End Sub





from exchangelib import DELEGATE, Account, Credentials, Configuration
import pandas as pd

# Define credentials and account details
credentials = Credentials('your-email@example.com', 'your-password')
config = Configuration(server='your-exchange-server.com', credentials=credentials)
account = Account('your-email@example.com', credentials=credentials, autodiscover=False, config=config, access_type=DELEGATE)

# Create a list to store email details
email_data = []

for item in account.inbox.all().order_by('-datetime_received')[:100]:  # Fetch the latest 100 emails
    email_data.append({
        "Date": item.datetime_received,
        "From": item.sender.email_address,
        "Subject": item.subject
    })

# Convert email data to a DataFrame
df = pd.DataFrame(email_data)

# Save DataFrame to an Excel file
output_file_path = "/path/to/your/destination/email_data.xlsx"
df.to_excel(output_file_path, index=False)

print(f"Excel file saved to {output_file_path}")

